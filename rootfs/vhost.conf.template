{{ $v := dict "$" $ }}
{{ $v := merge $v ( dict "Env"                           .Env) }}
{{ $v := merge $v ( dict "nostatics"                   ( .Env.NO_STATICS | default "" )                                               ) }}
{{ $v := merge $v ( dict "minio_server_name"           ( .Env.NGINX_MINIO_SERVERNAME | default "minio" )                              ) }}
{{ $v := merge $v ( dict "minio_server_aliases"        ( .Env.NGINX_MINIO_SERVER_ALIASES | default "" )                               ) }}
{{ $v := merge $v ( dict "server_name"                 ( .Env.NGINX_SERVERNAME | default "localhost" )                                ) }}
{{ $v := merge $v ( dict "server_aliases"              ( .Env.NGINX_SERVER_ALIASES | default "" )                                     ) }}
{{ $v := merge $v ( dict "loglevel"                    ( .Env.NGINX_LOGLEVEL | default "crit" )                                       ) }}
{{ $v := merge $v ( dict "server_name_in_redirect"     ( .Env.NGINX_SERVERNAME_IN_REDIRECT | default "off" )                          ) }}
{{ $v := merge $v ( dict "server_name_in_redirect_ssl" ( .Env.NGINX_SERVERNAME_IN_REDIRECT_SSL | default $v.server_name_in_redirect ) ) }}
{{ $v := merge $v ( dict "real_ip_from_recursive"      ( .Env.NGINX_REAL_IP_FROM_RECURSIVE | default "on" )                           ) }}
{{ $v := merge $v ( dict "real_ip_from"                ( .Env.NGINX_REAL_IP_FROM | default "10.0.0.0/8 172.16.0.0/12 192.168.0.0/16" )) }}
{{ $v := merge $v ( dict "client_max_body_size"        ( .Env.NGINX_BODY_SIZE | default "1000G" )                 ) }}

# optimize internal nginx buffers
types_hash_max_size 2048;
variables_hash_max_size 1024;
variables_hash_bucket_size 256;
server_names_hash_bucket_size 256;
server_names_hash_max_size 1024;
proxy_headers_hash_max_size  1024;
proxy_headers_hash_bucket_size 128;
proxy_redirect off;
proxy_buffer_size 256k;
proxy_buffers 4 256k;
proxy_busy_buffers_size 256k;

# logging setup
log_format custom_combined '"$remote_addr - $remote_user [$time_local] "$request" $status $bytes_sent "$http_referer" "$http_user_agent" "$gzip_ratio"';
# Define type of requests going to logs (to remove OPTIONS requests for example)
map $request_method $method_loggable { OPTIONS 0;default 1;}

# activate real_ip logging
real_ip_recursive {{ $v.real_ip_from_recursive }};
{{ range $v.real_ip_from | splitList " " }}
set_real_ip_from {{ . }};
{{ end }}

# SSL offload support (use_scheme is the proxified scheme)
# if X-SSL/X-FORWADED-PROTO header is set, we are behind a ssl gateway
# so the scheme is either from the request or
# forced to ssl if we have the X-SSL header set to 1
# break loop resolution loop while map resolution
map "$http_x_ssl$http_x_forwarded_proto" $forwarded_ssl_scheme {default $scheme; "~(1|https)" https;}
# if we come directly from https on localbox without x_ssl, set it.
map $forwarded_ssl_scheme $http_x_ssl_resolved {default 0; https 1;}

# boolean value of https/http: on == https again, we default to the request value
# but also force it to true when we are forced
# to be on ssl via X-SSL/X-FORWARDED-PROTO
map $forwarded_ssl_scheme $fastcgi_ssl_toggle                 {default $https;https on;}
map $http_x_ssl_resolved  $forwarded_remote_server_port       {default $remote_port;1 443;}
map $http_x_ssl_resolved  $forwarded_static_server_port       {default 80;1 443;}
map $http_x_ssl_resolved  $forwarded_server_port              {default $server_port;1 443;}
map $http_x_ssl_resolved  $forwarded_server_port              {default $server_port;1 443;}
map $http_x_ssl_resolved  $http_x_forwarded_protocol_resolved {default tcp;1 ssl;}
map $http_x_ssl_resolved  $http_x_forwarded_ssl_resolved      {default off;1 on;}
map $http_x_ssl_resolved  $http_x_forwarded_proto_resolved    {default http;1 https;}

# Obtain best http host
map $http_host $this_host {
    default          $http_host;
    ''               $host;
}
map $http_x_forwarded_host $best_http_host {
    default          $http_x_forwarded_host;
    ''               $this_host;
}

server {
    listen 80;

    server_name {{ $v.server_name }}{{if $v.server_aliases }}{{$v.server_aliases}}{{end}};
    server_name_in_redirect {{ $v.server_name_in_redirect }};

    error_log  /logs/mlflow-error.log  {{ $v.loglevel }};
    access_log /logs/mlflow-access.log custom_combined if=$method_loggable;

    {{ define "vhost" }}
    {{ if .Env.MLFLOW__HTTP_PROTECT_PASSWORD }}
    auth_basic            "Restricted";
    auth_basic_user_file  /etc/htpasswd-protect;
    {{ end }}
    gzip on;
    # adds a Vary: Accept-Encoding in the response, and it's a valid varying
    # info as we may not gzip depending on the value of Accept-Encoding
    gzip_vary on;
    gzip_proxied any;
    # note that text/html is always on by default
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/cache-manifest
        application/json
        application/x-javascript
        application/xml
        application/xml+rss
        application/rss+xml
        application/javascript
        application/atom+xml
        application/ld+json
        application/manifest+json
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        image/svg+xml
        application/xhtml+xml
        application/vnd.mapbox-vector-tile
        font/opentype;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_comp_level 4;
    client_max_body_size {{.client_max_body_size}};
    # feed the map variables for ssl up
    set $http_x_ssl                $http_x_ssl_resolved;
    set $http_x_forwarded_proto    $http_x_forwarded_proto_resolved;
    set $http_x_forwarded_ssl      $http_x_forwarded_ssl_resolved;
    set $http_x_forwarded_protocol $http_x_forwarded_protocol_resolved;
    # set $scheme                  $forwarded_ssl_scheme;
    # proxy params headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header x-forwarded-proto $http_x_forwarded_proto_resolved;
    proxy_set_header x-forwarded-ssl $http_x_forwarded_ssl_resolved;
    proxy_set_header x-forwarded-protocol $http_x_forwarded_protocol_resolved;
    proxy_buffering off;
    proxy_http_version 1.1;

    location / {
         proxy_set_header SCRIPT_NAME $http_x_script_name;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_redirect off;
         proxy_pass http://mlflow-server:5000;

         # Never cache the API content to prevent proxy caching
         add_header Pragma "no-cache";
         add_header Cache-Control "private, max-age=0, no-cache, no-store";
     }

    {{ end }}
    {{ template "vhost" $v }}

}

server {
    listen 80;

    server_name {{ $v.minio_server_name }}{{if $v.minio_server_aliases }}{{$v.server_aliases}}{{end}};
    server_name_in_redirect {{ $v.server_name_in_redirect }};

    error_log  /logs/minio-error.log  {{ $v.loglevel }};
    access_log /logs/minio-access.log custom_combined if=$method_loggable;

    {{ define "mvhost" }}
    gzip on;
    # adds a Vary: Accept-Encoding in the response, and it's a valid varying
    # info as we may not gzip depending on the value of Accept-Encoding
    gzip_vary on;
    gzip_proxied any;
    # note that text/html is always on by default
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/cache-manifest
        application/json
        application/x-javascript
        application/xml
        application/xml+rss
        application/rss+xml
        application/javascript
        application/atom+xml
        application/ld+json
        application/manifest+json
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        image/svg+xml
        application/xhtml+xml
        application/vnd.mapbox-vector-tile
        font/opentype;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_comp_level 4;
    client_max_body_size {{.client_max_body_size}};
    # feed the map variables for ssl up
    set $http_x_ssl                $http_x_ssl_resolved;
    set $http_x_forwarded_proto    $http_x_forwarded_proto_resolved;
    set $http_x_forwarded_ssl      $http_x_forwarded_ssl_resolved;
    set $http_x_forwarded_protocol $http_x_forwarded_protocol_resolved;
    # set $scheme                  $forwarded_ssl_scheme;
    # proxy params headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header x-forwarded-proto $http_x_forwarded_proto_resolved;
    proxy_set_header x-forwarded-ssl $http_x_forwarded_ssl_resolved;
    proxy_set_header x-forwarded-protocol $http_x_forwarded_protocol_resolved;
    proxy_buffering off;
    proxy_http_version 1.1;

    location / {
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_redirect off;
         proxy_pass http://minio:9000;

         # Never cache the API content to prevent proxy caching
         add_header Pragma "no-cache";
         add_header Cache-Control "private, max-age=0, no-cache, no-store";
    }

    {{ end }}
    {{ template "mvhost" $v }}

}


